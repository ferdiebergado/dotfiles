#!/bin/bash

#########################################################
#                                                       #
# ARCHMENU                                              #
# Arch Linux Package Management Menu                    #
#                                                       #
# Author:   Ferdinand Saporas Bergado                   #
# License:  MIT                                         #
#                                                       #
#########################################################

#set -euo pipefail

# COLORS
RED='\033[0;31m'
CYAN='\033[1;36m'
ORANGE='\033[0;33m'
PURPLE='\033[0;35m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
LIGHTGRAY='\033[0;37m'
NC='\033[0m' # No Color
bold=$(tput bold)
normal=$(tput sgr0)

# VARS
APP_NAME="archmenu"
APP_DIR="/tmp/$APP_NAME"
APP_CACHE="$APP_DIR/$APP_NAME"
INSTALLED_CACHE="$APP_DIR/installed.list"
ORPHANED_CACHE="$APP_DIR/orphaned.list"
NATIVE_CACHE="$APP_DIR/native.list"
AUR_CACHE="$APP_DIR/aur.list"
EXPLICIT_CACHE="$APP_DIR/explicit.list"
ALLAUR_CACHE="$APP_DIR/allaur.list"
ALL_CACHE="$APP_DIR/all.list"
AURINFO_CACHE="$APP_DIR/aurinfo.list"
APPEND_CMD="grep -E 'Name|Description' | sed -e :a -e '\$!N;s/\nDescription/ /;ta' -e 'P;D' | awk -F ':' '{print \$2,\$3}' | sed 's/        / - /g' | sed 's/^ //g'"
FZF_CMD="fzf --info inline --prompt 'Select a package > ' +m -e +s --reverse --preview-window right:60%:wrap"
YAY_PREVIEW_CMD="--preview 'yay -Qi {1}'"
FZF_PREVIEW_CMD="$FZF_CMD $YAY_PREVIEW_CMD"
APP_ERROR=""
TOTAL_APPS=0
TOTAL_NATIVE=0
TOTAL_AUR=0
TOTAL_ORPHANED=0
#BV='\x1b(0\x78\x1b(B'
BH='\x1b(0\x71\x1b(B'
#BTL='\x1b(0\x6c\x1b(B'
#BTR='\x1b(0\x6b\x1b(B'
#BBR='\x1b(0\x6a\x1b(B'
#BBL='\x1b(0\x6d\x1b(B'

# FUNCTIONS
check_deps() {
    APP_DEPS="fzf pacman expac yay pactree reflector"
    MISSING=0
    for deps in $APP_DEPS; do
        [[ ! -f "/usr/bin/$deps" ]] && echo -e "\n${RED}$deps is not installed.${NC}" && MISSING=1
    done
    [[ $MISSING -eq 1 ]] && exit 1
}

get_total_packages() {
    TOTAL_APPS="$(($TOTAL_NATIVE + $TOTAL_AUR))"
}

createdir() {
    [[ ! -d $APP_DIR ]] && mkdir $APP_DIR
}

build_app_cache() {
    #[[ ! -f $APP_CACHE ]] && yay -Slq | sort > $APP_CACHE
    if [ ! -f $APP_CACHE ]; then
        pacman -Si | eval "$APPEND_CMD" >$APP_CACHE
        yay -Sl --aur | cut -d ' ' -f 2 >>$APP_CACHE
        cat $APP_CACHE | sort >$ALL_CACHE
    fi
}

build_installed_cache() {
    yay -Q | sort >$INSTALLED_CACHE
}

build_orphaned_cache() {
    [[ ! -f $ORPHANED_CACHE ]] && yay -Qdt | sort >$ORPHANED_CACHE
    TOTAL_ORPHANED="$(cat $ORPHANED_CACHE | wc -l)"
}

build_native_cache() {
    [[ ! -f $NATIVE_CACHE ]] && yay -Qn | sort >$NATIVE_CACHE
    TOTAL_NATIVE="$(cat $NATIVE_CACHE | wc -l)"
    get_total_packages
}

build_aur_cache() {
    [[ ! -f $AUR_CACHE ]] && yay -Qm | sort >$AUR_CACHE
    TOTAL_AUR="$(cat $AUR_CACHE | wc -l)"
    get_total_packages
}

build_explicit_cache() {
    [[ ! -f $EXPLICIT_CACHE ]] && yay -Qe | sort >$EXPLICIT_CACHE
}

wait_input() {
    echo -e "\n${BLUE}Press any key to continue...${NC}\n"
    read
}

update_mirrors() {
    LAST_SYNC_DATE="$(date -r /etc/pacman.d/mirrorlist '+%D')"
    CURRENT_DATE="$(date '+%D')"
    if [ $(date -d $LAST_SYNC_DATE '+%s') -lt $(date -d $CURRENT_DATE '+%s') ]; then
        echo -e "${YELLOW}Updating mirrorlists...${NC}\n" &
        sh -c "sudo reflector --protocol https --latest 5 --age 24 --sort rate --save /etc/pacman.d/mirrorlist"
        echo -e "\n${GREEN}Mirrors updated.${NC}\n"
    else
        echo -e "\n${GREEN}Mirrors are up to date.${NC}\n"
    fi
}

show_prompt() {
    if [ -n "$APP_ERROR" ]; then
        echo -e "${RED}$APP_ERROR${NC}\n"
        APP_ERROR=""
    fi
    echo -e "Select a task [${bold}1-13, 0 to quit${normal}]:\n"
}

print_border() {
    for i in {1..78}; do
        printf "$BH"
    done
    echo -e "\n"
}

show_menu() {
    clear
    echo -e "\n${CYAN}${bold}Arch Linux Package Management Menu${normal}${NC}\n"
    [[ ! $TOTAL_APPS -eq 0 ]] && echo -e "Installed Packages: ${bold}$(($TOTAL_NATIVE + $TOTAL_AUR))${normal}\tNative: ${bold}$TOTAL_NATIVE${normal}\tAUR: ${bold}$TOTAL_AUR${normal}\tOrphaned: ${bold}$TOTAL_ORPHANED${normal}\n"
    print_border
    echo -e "${bold}Tasks${normal}\n"
    echo -e "1 - Update mirrorlist\t\t\t10 - Clear package cache"
    echo -e "\n2 - Update installed packages\t\t11 - List last installed packages"
    echo -e "\n3 - Install a package\t\t\t12 - Reverse dependency tree"
    echo -e "\n4 - Remove a package\t\t\t13 - Delete db lock file"
    echo -e "\n5 - Remove a package (w/ dependencies)\t14 - Install from AUR"
    echo -e "\n6 - List orphaned packages"
    echo -e "\n7 - List installed from official repositories"
    echo -e "\n8 - List installed from AUR"
    echo -e "\n9 - List explicitly installed packages\n"
    print_border
    show_prompt
}

clear_cache() {
    rm -f "$APP_DIR/*"
}

clear_installed_cache() {
    rm -f "$APP_DIR/*.list"
}

# MAIN
check_deps
createdir
echo -e "\n${YELLOW}Getting package information...${NC}\n"
build_native_cache
build_aur_cache
build_orphaned_cache
show_menu

trap 'show_menu' 2

while read -e option; do
    case $option in
        # Update mirrorlist
        1)
            update_mirrors
            wait_input
            ;;
        # Update installed packages
        2)
            update_mirrors
            sh -c "yay -Syu"
            [[ $? -eq 0 ]] && rm -f $APP_CACHE
            wait_input
            ;;
        # Install a package
        3)
            build_app_cache
            update_mirrors
            sh -c "cat $ALL_CACHE | $FZF_CMD --preview 'yay -Si {1}' --header 'INSTALL A PACKAGE' --multi | cut -d ' ' -f 1 | xargs -or yay -S"
            [[ $? -eq 0 ]] && clear_installed_cache
            wait_input
            ;;
        # Remove a package
        4)
            build_installed_cache
            sh -c "cat $INSTALLED_CACHE | $FZF_PREVIEW_CMD --header 'REMOVE A PACKAGE' --multi | cut -d ' ' -f 1 | xargs -or yay -Rn"
            [[ $? -eq 0 ]] && clear_installed_cache
            wait_input
            ;;
        # Remove a package and its dependencies
        5)
            build_installed_cache
            sh -c "cat $INSTALLED_CACHE | $FZF_PREVIEW_CMD --header 'REMOVE A PACKAGE WITH ITS DEPENDENCIES' --multi | cut -d ' ' -f 1 | xargs -or yay -Rns"
            [[ $? -eq 0 ]] && clear_installed_cache
            wait_input
            ;;
        # List orphaned packages
        6)
            build_orphaned_cache
            sh -c "cat $ORPHANED_CACHE | $FZF_PREVIEW_CMD --header 'ORPHANED PACKAGE(S)'"
            ;;
        # List native installed packages
        7)
            build_native_cache
            sh -c "cat $NATIVE_CACHE | $FZF_PREVIEW_CMD --header 'INSTALLED NATIVE PACKAGES'"
            ;;
        # List packages installed from AUR
        8)
            build_aur_cache
            sh -c "cat $AUR_CACHE | $FZF_PREVIEW_CMD --header 'INSTALLED AUR PACKAGES'"
            ;;
        # List explicitly installed packages
        9)
            build_explicit_cache
            sh -c "cat $EXPLICIT_CACHE | $FZF_PREVIEW_CMD --header 'EXPLICITLY INSTALLED PACKAGES'"
            ;;
        # Clear package cache
        10)
            sh -c "sudo rm -fv /var/cache/pacman/pkg/*"
            wait_input
            ;;
        # List last installed packages
        11)
            sh -c "expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort | tail -n 20 | cut -f2 | $FZF_PREVIEW_CMD --header 'RECENTLY INSTALLED PACKAGES' "
            ;;
        # Show reverse dependency tree for a package
        12)
            build_installed_cache
            echo -e "\n"
            sh -c "cat $INSTALLED_CACHE | $FZF_PREVIEW_CMD --header 'REVERSE DEPENDENCY TREE' | cut -d' ' -f1 | xargs -r pactree -cr"
            wait_input
            ;;
        # Delete db lock file
        13)
            [[ -z $(pgrep -x pacman) ]] && sudo rm -iv /var/lib/pacman/db.lck
            [[ $? -eq 0 ]] && echo -e "\n${GREEN}Lock file deleted.${NC}\n"
            wait_input
            ;;
        # Install from AUR
        14)
            echo -e "\nEnter search term: "
            read p
            yay "$p"
            wait_input
            ;;
        0)
            exit 0
            ;;
        menu)
            show_menu
            ;;
        *)
            APP_ERROR='Invalid input'
            ;;
    esac

    show_menu
done
