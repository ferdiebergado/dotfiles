#!/bin/bash
# Laravel
laravel new "$1"

cd "$1"

git init
git add .
git commit -m "Fresh install"

# Email verification
echo -e "Enabling email verification...\n"
sed -i "s/Auth::routes();/Auth::routes(['verify' => true]);/" routes/web.php
sed -i "s/class User extends Authenticatable/class User extends Authenticatable implements MustVerifyEmail/" app/User.php
git add .
git commit -m "Enabled email verification"

# Authentication
composer require laravel/ui
php artisan ui:auth
sed -i "s/\$table->timestamps();/\n\$table->string('role')->default('end_user');\n\$table->boolean('active')->default(true);\n\$table->timestamps();/" database/migrations/*create_users_table.php
git add .
git commit -m "Scaffolded Authentication"

# Debugbar
echo -e "Installing laravel debugbar...\n"
composer require barryvdh/laravel-debugbar --dev
php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"
git add .
git commit -m "Installed Laravel Debugbar"

# Model Caching
echo -e "Installing laravel model caching...\n"
composer require genealabs/laravel-model-caching:*
cat > app/BaseModel.php << PHP
<?php namespace App;

use GeneaLabs\LaravelModelCaching\Traits\Cachable;
use Illuminate\Database\Eloquent\Model;

abstract class BaseModel extends Model
{
    use Cachable;
    //
}
PHP
git add .
git commit -m "Install Laravel Model Caching"

mkdir app/Repositories
cat > app/Repositories/BaseRepository.php << PHP
<?php
namespace App\Repositories;
use App\BaseModel;
use App\Repositories\BaseRepositoryInterface;

abstract class BaseRepository implements BaseRepositoryInterface
{
    protected \$model;
    /**
     * BaseRepository constructor.
     * @param Model \$model
     */
    public function __construct(BaseModel \$model)
    {
        \$this->model = \$model;
    }
}
PHP
cat > app/Repositories/BaseRepositoryInterface.php << PHP
<?php

namespace App\Repositories;

interface BaseRepositoryInterface
{
    /**
    * Create a model instance
     * @param array \$attributes
     * @return mixed
     */
    public function create(array \$attributes);

    /**
     * Update a model instance
     * @param array \$attributes
     * @param int \$id
     * @return mixed
     */
    public function update(array \$attributes, int \$id);

    /**
     * Return all model rows
     * @param array \$columns
     * @param string \$orderBy
     * @param string \$sortBy
     * @return mixed
     */
    public function all(\$columns = array('*'), string \$orderBy = 'id', string \$sortBy = 'desc');

    /**
     * Find one by ID
     * @param int \$id
     * @return mixed
     */
    public function find(int \$id);

    /**
     * Find one by ID or throw exception
     * @param int \$id
     * @return mixed
     */
    public function findOneOrFail(int \$id);

    /**
     * Find based on a different column
     * @param array \$data
     * @return mixed
     */
    public function findBy(array \$data);

    /**
     * Find one based on a different column
     * @param array \$data
     * @return mixed
     */
    public function findOneBy(array \$data);

    /**
     * Find one based on a different column or through exception
     * @param array \$data
     * @return mixed
     */
    public function findOneByOrFail(array \$data);

    /**
     * Delete one by Id
     * @param int \$id
     * @return mixed
     */
    public function delete(int \$id);
}
PHP

cat > app/Repositories/EloquentRepository.php << PHP
<?php

namespace App\Repositories;

class EloquentRepository extends BaseRepository
{
    /**
     * Return all model rows
     * @param array \$columns
     * @param string \$orderBy
     * @param string \$sortBy
     * @return mixed
     */
    public function all(\$columns = array('*'), string \$orderBy = 'id', string \$sortBy = 'desc')
    {
        return \$this->model->orderBy(\$orderBy, \$sortBy)->get(\$columns);
    }

    /**
     * Create a model instance
     * @param array \$attributes
     * @return mixed
     */
    public function create(array \$attributes)
    {
        return $this->model->create(\$attributes);
    }

    /**
     * Create a model instance or return if it already exists
     * @param array \$attributes
     * @return mixed
     */
    public function firstOrCreate(array \$attributes)
    {
        return \$this->model->firstOrCreate(\$attributes);
    }

    /**
     * Update a model instance
     * @param array \$attributes
     * @param int \$id
     * @return mixed
     */
    public function update(array \$attributes, int \$id)
    {
        \$model = \$this->findOneOrFail(\$id);
        return \$model->update(\$attributes);
    }

    /**
     * Find one by ID
     * @param int \$id
     * @return mixed
     */
    public function find(int \$id)
    {
        return \$this->model->find(\$id);
    }

    /**
     * Find one by ID or throw exception
     * @param int \$id
     * @return mixed
     */
    public function findOneOrFail(int \$id)
    {
        return \$this->model->findOrFail(\$id);
    }

    /**
     * Find based on a different column
     * @param array \$data
     * @return mixed
     */
    public function findBy(array \$data)
    {
        \$query = \$this->model->query();
        foreach (\$data as \$key => \$value) {
            \$query = \$query->where(\$key, \$value);
        }
        return \$query;
    }

    /**
     * Delete one by Id
     * @param int \$id
     * @return mixed
     */
    public function delete(int \$id)
    {
        \$model = \$this->findOneOrFail(\$id);
        return \$model->delete();
    }
}
PHP

php artisan make:provider RepositoryServiceProvider
sed -i "s/\/\/AppServiceProviders/App\Providers\RepositoryServiceProvider::class,\n\/\/AppServiceProviders/" config/app.php
git add .
git commit -m "Added BaseRepository"

# Model factory
echo -e "Installing model factory helper...\n"
composer require --dev mpociot/laravel-test-factory-helper
git add .
git commit -m "Installed Laravel Test Factory Helper"

echo -e "Adding View Component Template...\n"
mkdir -p app/Http/ViewComponents
cat > app/Http/ViewComponents/ViewComponent.php << PHP
<?php

namespace App\Http\ViewComponents;

use Illuminate\Support\Facades\View;
use Illuminate\Contracts\Support\Htmlable;

class ViewComponent implements Htmlable
{
    protected $repository;

    public function __construct(BaseRepositoryInterface $repository)
    {
        $this->repository = $repository;
    }

    public function toHtml()
    {
        return View::make('highlights')
            ->with('highlights', $this->repository->highlights())
            ->render();
    }
}
PHP
git add .
git commit -m "Added View Component Template"

echo "Adding Helper Service Provider"
cp ~/.config/scripts/HelperServiceProvider.php app/Providers/
sed -i "s/\/\/AppServiceProviders/App\Providers\HelperServiceProvider::class,\n\/\/AppServiceProviders/" config/app.php
git add .
git commit -m "Added Helper ServiceProvider"

# Configure for shared hosting
cp ~/.config/scripts/AppServiceProvider.php app/Providers/
sed -i "s/app\/public/app\/public_html/" config/filesystems.php
sed -i "s/public/public_html/" server.php
cp ~/.config/scripts/webpack.mix.js .
mv public/ public_html/
git add .
git commit -m "Configured for shared hosting"

# Environment
echo -e "Modifying .env...\n"
sed -i "s/MAIL_HOST=smtp.mailtrap.io/MAIL_HOST=localhost/" .env
sed -i "s/MAIL_PORT=2525/MAIL_PORT=1025/" .env
git add .
git commit -m "Configured email dev server"

sed -i "s/mysql/sqlite/" .env
touch database/database.sqlite
sed -i "s/laravel/database\/database.sqlite/" .env
git add .
git commit -m "Configured sqlite as database"

echo -e "Done."
